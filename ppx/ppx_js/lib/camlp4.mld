{1 Camlp4 syntax extension for Js_of_ocaml}

{b WARNING}: The Camlp4 syntax extension is not longer part of the js_of_ocaml distribution.

A Camlp4 syntax extension is available for manipulating object properties,
invoking methods and creating objects.
We advise to use the {{:index.html} Ppx} syntax extension instead.

The syntax and typing rules are as follows:

{3 Getting a property}
{v
obj : <m : u prop> Js.t
-----------------------
     obj##m : u
v}

{3 Setting a property}
{v
obj : <m : u prop> Js.t
  e : u
-----------------------
   obj##m <- e : unit
v}

{3 Invoking a method}
{v
obj : <m : t_1 -> ... -> t_n -> u meth; ..> Js.t
    e_i : t_i               (1 <= i <= n)
-------------------------------------------------
          obj##m(e_1, ..., e_n) : u
v}

{3 Using an object constructor}
{v
constr : (t_1 -> ... -> t_n -> u Js.t) Js.constr
e_i : t_i               (1 <= i <= n)
------------------------------------------------
        jsnew constr (e1, ..., en) : u Js.t
v}

{3 Creating a literal object}
{[
jsobject (self) (* Equivalent of this *)
  val x = 3 (* read-only prop *)
  val mutable y = 4 (* read/write prop *)
  method foo i = self##y <- self##x + i
end
]}
Properties are defined with the [val] keyword.

[mutable] makes the property writable.

[self] can be any identifier and will be bind to [this] in javascript.

In this case, the object has the following type:
{[
< foo : int -> unit Js.meth;
    x : int Js.readonly_prop;
    y : int Js.prop
> Js.t
]}
