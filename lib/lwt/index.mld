{1 Js_of_ocaml-lwt}

{2 Javascript specific Lwt functions}

{2 File reader}

{2 XmlHttpRequest}

{2 Jsonp}

{2 Events handlers}

{!module:Js_of_ocaml_lwt.Lwt_js_events} allows one program event
handlers very easily and concisely.

This module defines functions you can call on a DOM element to create
an [Lwt] promise that will return when the event occures.

Example:

{[
  Lwt.ignore_result (Js_of_ocaml_lwt.Lwt_js_events.click target ~>>= handler);
]}

The handler receives the JS event as parameter.

Each of these functions has a version (same name with an ending "s")
that loops when the handler terminates.

Example:

{[
  Lwt.ignore_result (Js_of_ocaml_lwt.Lwt_js_events.clicks target handler);
]}

To remove an event handler, cancel the Lwt threads using
{!value:Lwt.cancel}.  It is also possible to use {!value: Lwt.pick}.
For example the following piece of code waits for a click on one of t1
or t2:

{[
   Lwt.pick
     [ Js_of_ocaml_lwt.Lwt_js_events.click t1 ~>>= handler1
     ; Js_of_ocaml_lwt.Lwt_js_events.click t2 ~>>= handler2
     ]
]}

{b Warning}: If you are using {!value:Lwt.pick} and your handlers take
time, be aware that other events listeners will not be cancelled
before the handler has terminated. It is probably a better idea to
return immediately after having launched the long handlers.


Look at the {!module:Js_of_ocaml_lwt.Lwt_js_events} for more
information.

{2 Graphics_js}
{b Library js_of_ocaml_lwt.graphics}

{2 js_of_ocaml_lwt.logger}
{b Library }
{!module:Lwt_log_js} provides an [Lwt] logger to log to the [console].