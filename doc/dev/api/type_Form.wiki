<<code language="ocaml" | sig
  class type formData =
    object
      method append :
        Js_of_ocaml__.Js.js_string Js_of_ocaml__.Js.t ->
        Js_of_ocaml__.Js.js_string Js_of_ocaml__.Js.t ->
        unit Js_of_ocaml__.Js.meth
      method append_blob :
        Js_of_ocaml__.Js.js_string Js_of_ocaml__.Js.t ->
        Js_of_ocaml__.File.blob Js_of_ocaml__.Js.t ->
        unit Js_of_ocaml__.Js.meth
    end
  val formData : Form.formData Js_of_ocaml__.Js.t Js_of_ocaml__.Js.constr
  val formData_form :
    (Js_of_ocaml__.Dom_html.formElement Js_of_ocaml__.Js.t ->
     Form.formData Js_of_ocaml__.Js.t)
    Js_of_ocaml__.Js.constr
  type form_elt =
      [ `File of Js_of_ocaml__.File.file Js_of_ocaml__.Js.t
      | `String of Js_of_ocaml__.Js.js_string Js_of_ocaml__.Js.t ]
  type form_contents =
      [ `Fields of (string * Form.form_elt) list Stdlib.ref
      | `FormData of Form.formData Js_of_ocaml__.Js.t ]
  val append : Form.form_contents -> string * Form.form_elt -> unit
  val post_form_contents :
    Js_of_ocaml__.Dom_html.formElement Js_of_ocaml__.Js.t ->
    Form.form_contents
  val get_form_contents :
    Js_of_ocaml__.Dom_html.formElement Js_of_ocaml__.Js.t ->
    (string * string) list
  val empty_form_contents : unit -> Form.form_contents
  val form_elements :
    ?get:bool ->
    Js_of_ocaml__.Dom_html.formElement Js_of_ocaml__.Js.t ->
    (string * Form.form_elt) list
end >>